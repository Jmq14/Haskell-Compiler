(define (add_point p1 p2)
	(begin
		(return (cons (+ (car p1) (car p2)) (+ (cdr p1) (cdr p2))))
	)
)

(define (mul_point w p)
	(return (cons (* w (car p)) (* w (cdr p))))
)

(define (make_new_point w x y)
	(return (cons w (cons x y)))
)

(define (make_point)
	(begin
		(set! n 10)
		(make-vector p n)
		(vector-set! p 0 (make_new_point 0.124 0.521 0.831))
		(vector-set! p 1 (make_new_point 0.163 0.532 0.573))
		(vector-set! p 2 (make_new_point 0.845 0.572 0.532))
		(vector-set! p 3 (make_new_point 0.116 0.539 0.538))
		(vector-set! p 4 (make_new_point 0.171 0.582 0.618))
		(vector-set! p 5 (make_new_point 0.174 0.748 0.124))
		(vector-set! p 6 (make_new_point 0.735 0.652 0.452))
		(vector-set! p 7 (make_new_point 0.512 0.582 0.523))
		(vector-set! p 8 (make_new_point 0.713 0.149 0.523))
		(vector-set! p 9 (make_new_point 0.282 0.713 0.531))
		(return 0)
	)
)

(define (calc)
	(begin
		(set! ans (cons 0 0))
		(set! i 0)
		(while (< i n)
			(begin
				(set! ans (add_point ans (mul_point (car (vector-ref p i)) (cdr (vector-ref p i)))))
				(set! i (+ i 1)) 
			)
		)
		(return (mul_point ans (/ 1 n)))
	)
)

(define (main)
	(begin
		(set! gg (make_point))
		(print (calc))
		(return 0)
	)
)
